package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public
class Join extends Operator
{

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private int field1;
    private int field2;
    private Tuple t1 = null;
    private Tuple t2 = null;
    private HashMap<Field, ArrayList<Tuple>> hashJoin;
    private Iterator it = null;


    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public
    Join(JoinPredicate p, DbIterator child1, DbIterator child2)
    {
        // some code goes here
        this.p = p;
        this.field1 = p.getField1();
        this.field2 = p.getField2();
        this.child1 = child1;
        this.child2 = child2;
        hashJoin = new HashMap<Field, ArrayList<Tuple>>();
    }

    public
    JoinPredicate getJoinPredicate()
    {
        // some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public
    String getJoinField1Name()
    {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public
    String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public
    TupleDesc getTupleDesc()
    {
        // some code goes here
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public
    void open() throws DbException, NoSuchElementException,
                       TransactionAbortedException
    {
        // some code goes here
        super.open();
        child1.open();
        child2.open();

        // add child1 tuples to hashmap
        while (child1.hasNext())
        {
            Tuple next_tuple = child1.next();
            Field field = next_tuple.getField(field1);
            if (!hashJoin.containsKey(field))
            {
                hashJoin.put(field, new ArrayList<Tuple>());
            }
            hashJoin.get(field).add(next_tuple);
        }
        child1.rewind();
    }

    public
    void close()
    {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public
    void rewind() throws DbException, TransactionAbortedException
    {
        // some code goes here
        child1.rewind();
        child2.rewind();
        t1 = null;
        t2 = null;
        it = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     *
     * Change this to hash join later to improve performance. There are
     * two steps:
     * 1. partition all tuples to k blocks (hash % k) (since this project will
     * not have number of tuples exceeds memory, no partition is required,
     * only need to read in all tuples from a table once)
     * 2. for each partition in R, create hash table of size N (N tuples),
     * and join S tuples within the same partitioin
     *
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     *
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected
    Tuple fetchNext() throws TransactionAbortedException, DbException
    {
        // some code goes here

        Tuple new_tuple = null;
        if (p.getOperator() != Predicate.Op.EQUALS)
        {
            new_tuple = nestedLoop();
        }
        else
        {
            new_tuple = hashJoin();
        }

        return new_tuple;
    }

    /**
     * helper function to use nested loop to join in fetchNext
     * @return
     * @throws TransactionAbortedException
     * @throws DbException
     */
    protected
    Tuple nestedLoop() throws TransactionAbortedException, DbException
    {
//        System.out.format("nestedLoop -----------\n");
        Tuple new_tuple = null;
        while (t1 != null && child2.hasNext())
        {
            t2 = child2.next();
            if (p.filter(t1, t2))
            {
                new_tuple = joinTwoTuples(t1, t2);
//                System.out.format("joined tuple: %s\n", new_tuple.toString());
                return new_tuple;
            }
        }
        child2.rewind(); // rewind child2 since it might have all tuples done

        /**
         * all tuples in child2 are done,
         * or this is a new start
         */
        while (child1.hasNext())
        {
            t1 = child1.next();
            while (child2.hasNext())
            {
                t2 = child2.next();
//                System.out.format("t1: %s, t2: %s\n", t1.toString(), t2.toString());
                if (p.filter(t1, t2))
                {
                    new_tuple = joinTwoTuples(t1, t2);
                    return new_tuple;
                }
            }
            child2.rewind(); // all tuples in child2 are done, rewind and try next child1 tuple
        }
        return new_tuple;
    }

    /**
     * helper function to use hash join for join in fetchNext
     * @return
     * @throws TransactionAbortedException
     * @throws DbException
     */
    protected
    Tuple hashJoin() throws TransactionAbortedException, DbException
    {
//        System.out.format("hashJoin -----------\n");
        Tuple new_tuple = null;

        while (it != null && it.hasNext())
        {
            new_tuple = joinTwoTuples((Tuple)it.next(), t2);
            return new_tuple;
        }

        while (child2.hasNext())
        {
            t2 = child2.next();
            Field field = t2.getField(field2);
            if (hashJoin.containsKey(field))
            {
                ArrayList<Tuple> tmp_tuples =  hashJoin.get(field);
                it = tmp_tuples.iterator();
                new_tuple = joinTwoTuples((Tuple)it.next(), t2);
//                System.out.format("joined tuple: %s\n", new_tuple.toString());
                return new_tuple;
            }
        }

        return new_tuple;
    }


    /**
     * helper function to join two tuples and return a new tuple
     * @param t1
     * @param t2
     * @return
     */
    private Tuple joinTwoTuples(Tuple t1, Tuple t2)
    {
        Tuple new_tuple = new Tuple(getTupleDesc());
        int i, j;
        for (i=0, j=0; i < t1.getTupleDesc().numFields(); i++, j++)
        {
            new_tuple.setField(j, t1.getField(i));
        }
        for (i=0; i < t2.getTupleDesc().numFields(); i++, j++)
        {
            new_tuple.setField(j, t2.getField(i));
        }
        return new_tuple;
    }

    @Override
    public
    DbIterator[] getChildren()
    {
        // some code goes here
        DbIterator[] children = {child1, child2};
        return children;
    }

    @Override
    public
    void setChildren(DbIterator[] children)
    {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
